// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

// afun
double afun(double x, double alpha);
RcppExport SEXP _stablemix_afun(SEXP xSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(afun(x, alpha));
    return rcpp_result_gen;
END_RCPP
}
// dhint
double dhint(double u, double s, double alpha);
RcppExport SEXP _stablemix_dhint(SEXP uSEXP, SEXP sSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(dhint(u, s, alpha));
    return rcpp_result_gen;
END_RCPP
}
// dps_one
double dps_one(double s, double alpha);
RcppExport SEXP _stablemix_dps_one(SEXP sSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(dps_one(s, alpha));
    return rcpp_result_gen;
END_RCPP
}
// dps
NumericVector dps(NumericVector x, double alpha, bool return_log);
RcppExport SEXP _stablemix_dps(SEXP xSEXP, SEXP alphaSEXP, SEXP return_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type return_log(return_logSEXP);
    rcpp_result_gen = Rcpp::wrap(dps(x, alpha, return_log));
    return rcpp_result_gen;
END_RCPP
}
// dhexpstab
NumericVector dhexpstab(NumericVector x, double alpha, double delta, double theta, bool return_log, double tol);
RcppExport SEXP _stablemix_dhexpstab(SEXP xSEXP, SEXP alphaSEXP, SEXP deltaSEXP, SEXP thetaSEXP, SEXP return_logSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type return_log(return_logSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(dhexpstab(x, alpha, delta, theta, return_log, tol));
    return rcpp_result_gen;
END_RCPP
}
// dlhint
double dlhint(double u, double s, double alpha);
RcppExport SEXP _stablemix_dlhint(SEXP uSEXP, SEXP sSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(dlhint(u, s, alpha));
    return rcpp_result_gen;
END_RCPP
}
// dlps_one
double dlps_one(double s, double alpha);
RcppExport SEXP _stablemix_dlps_one(SEXP sSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(dlps_one(s, alpha));
    return rcpp_result_gen;
END_RCPP
}
// dlps
NumericVector dlps(NumericVector x, double alpha, bool return_log);
RcppExport SEXP _stablemix_dlps(SEXP xSEXP, SEXP alphaSEXP, SEXP return_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type return_log(return_logSEXP);
    rcpp_result_gen = Rcpp::wrap(dlps(x, alpha, return_log));
    return rcpp_result_gen;
END_RCPP
}
// dlhexpstab
NumericVector dlhexpstab(NumericVector x, double alpha, double theta, bool return_log, double tol);
RcppExport SEXP _stablemix_dlhexpstab(SEXP xSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP return_logSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type return_log(return_logSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(dlhexpstab(x, alpha, theta, return_log, tol));
    return rcpp_result_gen;
END_RCPP
}
// llhexpstab
double llhexpstab(NumericVector x, double alpha, double theta, bool return_log, double tol);
RcppExport SEXP _stablemix_llhexpstab(SEXP xSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP return_logSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type return_log(return_logSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(llhexpstab(x, alpha, theta, return_log, tol));
    return rcpp_result_gen;
END_RCPP
}
// mklA
NumericMatrix mklA(NumericMatrix lK, NumericMatrix lB, double alpha);
RcppExport SEXP _stablemix_mklA(SEXP lKSEXP, SEXP lBSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type lK(lKSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lB(lBSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(mklA(lK, lB, alpha));
    return rcpp_result_gen;
END_RCPP
}
// plstabmix
NumericVector plstabmix(NumericVector lz, double alpha, double theta, NumericVector lK, bool logp);
RcppExport SEXP _stablemix_plstabmix(SEXP lzSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP lKSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lz(lzSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lK(lKSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(plstabmix(lz, alpha, theta, lK, logp));
    return rcpp_result_gen;
END_RCPP
}
// plstabmixM
NumericMatrix plstabmixM(NumericMatrix lz, double alpha, double theta, NumericMatrix lK, bool logp);
RcppExport SEXP _stablemix_plstabmixM(SEXP lzSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP lKSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type lz(lzSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lK(lKSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(plstabmixM(lz, alpha, theta, lK, logp));
    return rcpp_result_gen;
END_RCPP
}
// find_upper
double find_upper(double p, double alpha, double theta, NumericVector lK);
RcppExport SEXP _stablemix_find_upper(SEXP pSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP lKSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lK(lKSEXP);
    rcpp_result_gen = Rcpp::wrap(find_upper(p, alpha, theta, lK));
    return rcpp_result_gen;
END_RCPP
}
// find_lower
double find_lower(double p, double alpha, double theta, NumericVector lK);
RcppExport SEXP _stablemix_find_lower(SEXP pSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP lKSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lK(lKSEXP);
    rcpp_result_gen = Rcpp::wrap(find_lower(p, alpha, theta, lK));
    return rcpp_result_gen;
END_RCPP
}
// dlstabmix
NumericVector dlstabmix(NumericVector lz, double alpha, double theta, NumericVector lK, bool logp);
RcppExport SEXP _stablemix_dlstabmix(SEXP lzSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP lKSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lz(lzSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lK(lKSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(dlstabmix(lz, alpha, theta, lK, logp));
    return rcpp_result_gen;
END_RCPP
}
// dlstabmixM
NumericMatrix dlstabmixM(NumericMatrix lz, double alpha, double theta, NumericMatrix lK, bool logp);
RcppExport SEXP _stablemix_dlstabmixM(SEXP lzSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP lKSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type lz(lzSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lK(lKSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(dlstabmixM(lz, alpha, theta, lK, logp));
    return rcpp_result_gen;
END_RCPP
}
// pevdC
NumericMatrix pevdC(NumericMatrix q, NumericMatrix loc, NumericMatrix scale, NumericMatrix shape, bool lower_tail, bool log_p);
RcppExport SEXP _stablemix_pevdC(SEXP qSEXP, SEXP locSEXP, SEXP scaleSEXP, SEXP shapeSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type loc(locSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pevdC(q, loc, scale, shape, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qevdC
NumericMatrix qevdC(NumericMatrix p, NumericMatrix loc, NumericMatrix scale, NumericMatrix shape);
RcppExport SEXP _stablemix_qevdC(SEXP pSEXP, SEXP locSEXP, SEXP scaleSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type loc(locSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(qevdC(p, loc, scale, shape));
    return rcpp_result_gen;
END_RCPP
}
// rankC
std::vector<size_t> rankC(const std::vector<float>& v_temp);
RcppExport SEXP _stablemix_rankC(SEXP v_tempSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<float>& >::type v_temp(v_tempSEXP);
    rcpp_result_gen = Rcpp::wrap(rankC(v_temp));
    return rcpp_result_gen;
END_RCPP
}
// calc_jpexcd_one_pairC
double calc_jpexcd_one_pairC(NumericVector x, NumericVector y, double p);
RcppExport SEXP _stablemix_calc_jpexcd_one_pairC(SEXP xSEXP, SEXP ySEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_jpexcd_one_pairC(x, y, p));
    return rcpp_result_gen;
END_RCPP
}
// isNA
LogicalVector isNA(NumericVector x);
RcppExport SEXP _stablemix_isNA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isNA(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_stablemix_afun", (DL_FUNC) &_stablemix_afun, 2},
    {"_stablemix_dhint", (DL_FUNC) &_stablemix_dhint, 3},
    {"_stablemix_dps_one", (DL_FUNC) &_stablemix_dps_one, 2},
    {"_stablemix_dps", (DL_FUNC) &_stablemix_dps, 3},
    {"_stablemix_dhexpstab", (DL_FUNC) &_stablemix_dhexpstab, 6},
    {"_stablemix_dlhint", (DL_FUNC) &_stablemix_dlhint, 3},
    {"_stablemix_dlps_one", (DL_FUNC) &_stablemix_dlps_one, 2},
    {"_stablemix_dlps", (DL_FUNC) &_stablemix_dlps, 3},
    {"_stablemix_dlhexpstab", (DL_FUNC) &_stablemix_dlhexpstab, 5},
    {"_stablemix_llhexpstab", (DL_FUNC) &_stablemix_llhexpstab, 5},
    {"_stablemix_mklA", (DL_FUNC) &_stablemix_mklA, 3},
    {"_stablemix_plstabmix", (DL_FUNC) &_stablemix_plstabmix, 5},
    {"_stablemix_plstabmixM", (DL_FUNC) &_stablemix_plstabmixM, 5},
    {"_stablemix_find_upper", (DL_FUNC) &_stablemix_find_upper, 4},
    {"_stablemix_find_lower", (DL_FUNC) &_stablemix_find_lower, 4},
    {"_stablemix_dlstabmix", (DL_FUNC) &_stablemix_dlstabmix, 5},
    {"_stablemix_dlstabmixM", (DL_FUNC) &_stablemix_dlstabmixM, 5},
    {"_stablemix_pevdC", (DL_FUNC) &_stablemix_pevdC, 6},
    {"_stablemix_qevdC", (DL_FUNC) &_stablemix_qevdC, 4},
    {"_stablemix_rankC", (DL_FUNC) &_stablemix_rankC, 1},
    {"_stablemix_calc_jpexcd_one_pairC", (DL_FUNC) &_stablemix_calc_jpexcd_one_pairC, 3},
    {"_stablemix_isNA", (DL_FUNC) &_stablemix_isNA, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_stablemix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
