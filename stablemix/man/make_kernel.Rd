% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stable_mixture.R
\name{make_kernel}
\alias{make_kernel}
\title{Construct kernel basis matrix}
\usage{
make_kernel(obs_coord, nbasis, type = c("smith", "br"),
  knot_coord = NULL, kern_bw = NULL, gvar = NULL, gscl = NULL)
}
\arguments{
\item{obs_coord}{matrix of observation coordinates. The rows correspond
to different locations, and the columns correspond to the dimensions of
those coordinates.}

\item{nbasis}{number of kernel (basis) functions to generate. Kernels will
sum to one across all nbasis at each location.}

\item{type}{(string) type of kernel function to create. Should be one of
either c("smith", "br"). For fixed, Gaussian density
kernels, use "smith". For a log-Gaussian process kernels, use "br",
which stands for Brown-Resnick.}

\item{knot_coord}{matrix of knot locations. The rows correspond to
different locations. Needed only if \code{type} = 'smith'.}

\item{kern_bw}{Kernel bandwidth (sd) for 'smith' kernel bases}

\item{gvar}{Log-Gaussian process variance term ('brown-resnick'). Needed
only if \code{type} = 'br'}

\item{gscl}{Log-Gaussian process scale/range term ('brown-resnick'). Needed
only if \code{type} = 'br'}
}
\value{
Matrix of log-kernel functions. Each row corresponds to a different
\code{obs_coord} and each column contains a single basis function, so that
the dimension is nrow(obs_coord) x nbasis.
}
\description{
Generate a set of kernel basis functions at the observation locations
in the matrix obs_coord such that the kernels sum to one at each observation
location. Kernels can either be two-dimensional Gaussian density functions
centered at knot_coord, or a realization of a log-Gaussian process. The
output is returned on the log-scale.
}
\examples{
# Not run
# Fixed, Gaussian density kernels
L <- 10        # Number of basis functions
n <- 100       # Number of spatial locations
v <- seq(0,1, l = L)
s <- seq(0.1, 0.9, l = n)
K <- make_kernel(s, L, "smith", knot_coord = v, kern_bw = 0.1)
matplot(s, exp(K), type = "l")

# log-Gaussian process kernels
set.seed(2017)
L <- 10        # Number of basis functions
n <- 100       # Number of spatial locations
s <- seq(0.1, 0.9, l = n)
K <- make_kernel(s, L, "br", gvar = 1, gscl = 1)
matplot(s, exp(K), type = "l")
}
